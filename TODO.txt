
standard dijkstra on edges, now convert ch to edges

    // TODO probably dont need paths???  Or, paths can be built just for CH.

    // API change: findPath, findAStar

convert back to adjacency_list connections as edge objects model, rather than STR coordinate with lookup

delete old edges instead of filtering through them?

apply A* to network contraction?

add outputFunctions (like in geojson dijkstra)

tailor new dijkstra to all alternate uses (contraction hierarchy and arcflags)

LOL - loadFromGeoJson should be replaced by new Graph(geojson)!
mutate inputs documentation

graph.properties, geometry should be array.  placement_index an integer.

TEST directed graph
 -- TEST directed graph from geojson extension

check edge creation for building CH (using sample-ch.geojson)
 - does it make sense?

clean out common.js

BENCHMARK SO FAR
--------
Benchmark faf.geojson, CA, OR, WA

TimeToContract: 209868, 210000~ 185013
        before after
ngraph: 92250, 107195 118439
ch:     14319, 8864   5835

OTHER
------

join alike and cut at intersections should have a recompute line length option


BUILDING CH && ARCFLAGS
---------------------------

make contraction hierarchy building process faster
-limit hops speed up contraction hierarchy?

michigan non-contiguous kmeans -is this a problem?  Research METIS

Cut ArcFlags processing time by using contraction hierarchy instead of std dijkstra

2 tiered arcFlags??


BIG PICTURE
--------------

Integrate CH with ArcFlags - if it doesnt immediately improve performance... can it!

golang or native node addon build-hierarchy and build-arcflags

C++ implementation for runDijkstra webAssembly
