
// run these on cloud!

// ArcFlags Dijkstra discrepancy
587 [ '-118.279876,33.928237', '-118.286079,33.797691' ] 13 '10.61639' 13 '10.61639' 15 '10.72914'
1514 [ '-119.699012,36.836746', '-119.304077,36.624341' ] 9 '39.44751' 9 '39.44751' 7 '39.45039'
2037 [ '-121.962786,37.316406', '-121.965576,37.363338' ] 6 '4.83526' 6 '4.83526' 8 '5.20190'
2052 [ '-117.226967,32.725845', '-117.220649,32.725387' ] 1 '0.37643' 1 '0.37643' 2 '0.52800'
2085 [ '-117.154648,32.715465', '-117.172865,32.729699' ] 4 '1.91511' 4 '1.91511' 8 '5.35313'
3705 [ '-122.347473,37.93362', '-122.347328,37.938632' ] 1 '0.34582' 1 '0.34582' 3 '0.43639'
4023 [ '-119.714737,34.429729', '-119.732636,34.428188' ] 3 '1.17736' 3 '1.17736' 4 '4.29885'
4652 [ '-117.697662,34.121547', '-117.610177,33.968791' ] 13 '15.40888' 13 '15.40889' 13 '15.43310'
5262 [ '-117.224999,32.728202', '-117.108719,32.675018' ] 13 '8.93906' 13 '8.93906' 16 '11.87343'
6100 [ '-118.166794,34.002937', '-118.236343,33.800529' ] 22 '16.91845' 22 '16.91845' 23 '16.94129'
6737 [ '-118.308258,34.101749', '-118.380668,33.872815' ] 33 '18.60105' 33 '18.60105' 34 '18.65888'
6808 [ '-118.296562,33.785236', '-118.177554,33.918435' ] 21 '15.26470' 21 '15.26470' 22 '15.38892'
8090 [ '-118.271348,34.026457', '-118.266151,34.03448' ] 2 '1.33279' 2 '1.33279' 4 '1.34690'
9083 [ '-117.918572,33.67329', '-117.777268,33.726158' ] 12 '11.42884' 12 '11.42884' 13 '11.58408'
ArcFlags no speedup?

?? dont store arc flags on every arc, only boundary arcs

use the same edge hash - don't do
 - Directed graph options
 - store edge hash once for each node pair.  forward and reverse flag for arc flags.

michigan non-contiguous -is this a problem?

make contraction hierarchy building process faster
-limit hops speed up contraction hierarchy?


speedwise would help a bit if edge hash distance lookup could be replaced by storing cost in adjacency list
- may not be practical

Integrate CH with ArcFlags


after: WebAssembly

---------

API Design

import {runContraction, Chase} from 'chase-js'
const {runContraction, runValidation, Chase} = require('chase-js');


 reference to my geojson cleanup library in Docs

 runContraction options: { (debug) }
 runValidation (looping segments or otherwise bad geojson)

 return Chase object

 new Chase()

 .saveHierarchy - this is just geojson w extra edges, + arc-flags + options metadata
 .loadHierarchy -
 .query({geojson=true, segmentIds=true, distance=true})

