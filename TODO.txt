
why did my recent changes add so much overhead to each CH call???
 
explore what adding reverse adj list did to coordinate order.

SO... figure out where things start to get tangled.  start at _arrangeContractedPaths

FACT: when I'm creating a contracted edge, I'm not really considering segment order.
 - does that matter?  fools errand to think i can arrange everything that perfectly so far downstream?
 - i think do this anyways.  no downside.

still this, but its all in the detangle, which is awesome because that's solvable IMO!
 -- seems like if you double up the geometry and properties for each direction (when creating) then you might bypass the need to detangle.

----
nGraph: 302.787ms
iterate: 0.005ms
order: 0.033ms
flatten: 0.010ms
mapgeo: 0.080ms
detangle: 21.467ms
ch: 22.324ms
Processing 83.00% complete... 83  -89.838311,43.016816,-72.465507,41.775534                 
----


- variable names and comments to distinguish whether youre working on an edge id or a node or coordinate (addEdge)
- strike all language regarding coords, as that wont always be applicable, and you always mean NODES anyways
- same for anything that says index

Non-GeoJSON data

Directed Networks
  - infra in place.  never been tested.  add non-geojson capability first

coordinate lookup almost assuredly broken

reorganize code

explore using typescript, as this has been a nightmare to debug.  tests now that design has been firmed up.


eventually need to run USA network through refinement procedures

BENCHMARKS
--------
Benchmark faf.geojson, CA, OR, WA: 10,000 routes

TimeToContract: 209868, 163293, 183686, 217732, 145840, 67919
ngraph:          92250, 118702, 108889, 111203, 107243, 83573
ch:              14319,   5188,   6573,   7971,   5806,  2674


All States, 10,000 routes --max_old_space_size=7000

TimeToContract:     8316742 ms
geojson-djikstra:   1279104 ms
ch:                   39203 ms

TimeToContract:      632043 ms
GeoJSON-Dijkstra:   1150428 ms
ContractionHierarchy: 10904 ms
