

Do a 1 for 1, following alt-build-contraction-hierarchy
&& regular build-contraction-hierarchy!


DATA OPTIMIZATIONS
------------------

TIME TO BUILD - Colorado, New Mexico, Wyoming only: 
  - BEFORE: 13.3s
  - AFTER:  

tailor new dijkstra to all alternate uses (contraction hierarchy and arcflags)
 - fix bidirectional
 - fix contraction hierarchy

LOL - loadFromGeoJson should be replaced by new Graph(geojson)!
mutate inputs documentation

graph.properties, geometry should be array.  placement_index an integer.

TEST directed graph
 -- TEST directed graph from geojson extension


clean common.js


OTHER
------

join alike and cut at intersections should have a recompute line length option


BUILDING CH && ARCFLAGS
---------------------------

make contraction hierarchy building process faster
-limit hops speed up contraction hierarchy?

michigan non-contiguous kmeans -is this a problem?  Research METIS

Cut ArcFlags processing time by using contraction hierarchy instead of std dijkstra

2 tiered arcFlags??


BIG PICTURE
--------------

Integrate CH with ArcFlags - if it doesnt immediately improve performance... can it!

golang or native node addon build-hierarchy and build-arcflags

C++ implementation for runDijkstra webAssembly
