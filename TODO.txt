
SO... figure out where things start to get tangled.  start at _arrangeContractedPaths

still this, but its all in the detangle, which is awesome because that's solvable IMO!
 -- seems like if you double up the geometry and properties for each direction (when creating) then you might bypass the need to detangle.

----
nGraph: 302.787ms
iterate: 0.005ms
order: 0.033ms
flatten: 0.010ms
mapgeo: 0.080ms
detangle: 21.467ms
ch: 22.324ms
Processing 83.00% complete... 83  -89.838311,43.016816,-72.465507,41.775534                 
----


- variable names and comments to distinguish whether youre working on an edge id or a node
- strike all language regarding coords, as that wont always be applicable, and you always mean NODES anyways
- same for anything that says index


WHY am i adding a contracted edge in the reverse direction.  seems like that would get deleted anyways
  - see what it does for accuracy (will it still work if i remove it)
  - and speed (was it faster before or after)

 
 explore using typescript, as this has been a nightmare to debug.  tests now that design has been firmed up.


eventually need to run USA network through refinement procedures

BENCHMARKS
--------
Benchmark faf.geojson, CA, OR, WA: 10,000 routes

TimeToContract: 209868, 163293, 183686, 217732, 145840, 67919
ngraph:          92250, 118702, 108889, 111203, 107243, 83573
ch:              14319,   5188,   6573,   7971,   5806,  2674


All States, 10,000 routes --max_old_space_size=7000

TimeToContract:     8316742 ms
geojson-djikstra:   1279104 ms
ch:                   39203 ms

TimeToContract:      632043 ms
GeoJSON-Dijkstra:   1150428 ms
ContractionHierarchy: 10904 ms
